# bot_webapp.py
# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram WebApp –¥–ª—è ¬´—Ç–∞–ø–∞–ª–∫–∏¬ª –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –∫–ª–∏–∫–æ–≤ –∏ —Å AFK.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot >= 20
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install python-telegram-bot==20.7
#
# 1) –ó–∞–ª–µ–π—Ç–µ index.html –Ω–∞ –ª—é–±–æ–π —Ö–æ—Å—Ç–∏–Ω–≥ —Å HTTPS (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitHub Pages, Vercel, Netlify).
# 2) –£–∫–∞–∂–∏—Ç–µ URL –≤ WEBAPP_URL –Ω–∏–∂–µ.
# 3) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞. –ö–æ–º–∞–Ω–¥–∞ /tap –ø—Ä–∏—à–ª—ë—Ç –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É¬ª (WebApp).
# 4) –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–∫–∞–ª—å–Ω–æ. –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª —à–ª—ë—Ç state –±–æ—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
# 5) –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å state –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ/–≤ —Ñ–∞–π–ª–µ –∏ —Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ø—ã.

import json
import logging
import os
from datetime import datetime
from pathlib import Path

from telegram import (
    Update,
    InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup, WebAppInfo,
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
)

TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-host.example.com/index.html")

# –§–∞–π–ª –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
SAVE_FILE = Path("tap_saves.json")

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tapper")

def load_saves():
    if SAVE_FILE.exists():
        try:
            return json.loads(SAVE_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_saves(data):
    try:
        SAVE_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        log.warning("Save failed: %s", e)

@CommandHandler("start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å WebApp-–∏–≥—Ä–æ–π ¬´–¢–∞–ø–∞–ª–∫–∞¬ª. –ò—Å–ø–æ–ª—å–∑—É–π /tap —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–Ω—É—Ç—Ä–∏ Telegram."
    )

@CommandHandler("tap")
async def tap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –í–∞—Ä–∏–∞–Ω—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await update.message.reply_text("–û—Ç–∫—Ä–æ–π –∏–≥—Ä—É:", reply_markup=kb_inline)

    # 2) –í–∞—Ä–∏–∞–Ω—Ç —Å —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–Ω–∞ –≤—ã–±–æ—Ä)
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton(text="üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True
    )
    await update.message.reply_text("–ò–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ WebApp –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ tg.sendData(JSON.stringify(...))
# –í PTB v20 —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º web_app_data –≤ API.
@MessageHandler(filters.ALL)
async def any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg and msg.web_app_data and msg.web_app_data.data:
        # —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
        raw = msg.web_app_data.data
        try:
            data = json.loads(raw)
        except Exception:
            await msg.reply_text("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
            return

        if isinstance(data, dict) and data.get("type") == "sync":
            state = data.get("state", {})
            saves = load_saves()
            uid = str(msg.from_user.id)
            saves[uid] = {
                "state": state,
                "updated_at": datetime.utcnow().isoformat() + "Z",
                "name": msg.from_user.full_name,
                "username": msg.from_user.username,
            }
            save_saves(saves)
            await msg.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–æ—Ç–∞ ‚úÖ")
            return

        await msg.reply_text("WebApp: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.")
        return

    # –ü—Ä–æ—á–µ–µ –≤–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # log.info("Non-webapp message: %s", msg.text if msg else None)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(start)
    app.add_handler(tap)
    app.add_handler(any_message)
    log.info("Bot is running. /tap to open WebApp.")
    app.run_polling()

if __name__ == "__main__":
    main()
