# bot_webapp.py
# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram WebApp –¥–ª—è –∏–≥—Ä—ã ¬´—Ç–∞–ø–∞–ª–∫–∞¬ª

import json
import logging
import os
import re
import sys
from datetime import datetime
from pathlib import Path

from telegram import (
    Update,
    InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup, WebAppInfo,
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í–∞—Ä–∏–∞–Ω—Ç 1: –≤–ø–∏—à–∏ —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ —Å—é–¥–∞ (—Ç–æ–ª—å–∫–æ —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather!)
TOKEN = "8380517379:AAF1pCJKN2uz2YL86yw_wKcFHGy_oFmvOjQ"

# –í–∞—Ä–∏–∞–Ω—Ç 2: —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ):
# TOKEN = os.getenv("BOT_TOKEN", "").strip() or "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BotFather"

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã index.html (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS!)
WEBAPP_URL = "https://voluble-rugelach-c8f17e.netlify.app"
# –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:
# WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-host.example.com/index.html").strip()

SAVE_FILE = Path("tap_saves.json")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if not re.fullmatch(r"\d{6,}:[A-Za-z0-9_-]{30,}", TOKEN):
    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TOKEN. –£–∫–∞–∂–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.")
    sys.exit(1)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tapper")

def load_saves():
    if SAVE_FILE.exists():
        try:
            return json.loads(SAVE_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_saves(data):
    try:
        SAVE_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        log.warning("Save failed: %s", e)

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å WebApp-–∏–≥—Ä–æ–π ¬´–¢–∞–ø–∞–ª–∫–∞¬ª. –ò—Å–ø–æ–ª—å–∑—É–π /tap —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É."
    )

async def tap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not WEBAPP_URL.startswith("https://"):
        await update.message.reply_text("‚ö† WEBAPP_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS. –°–µ–π—á–∞—Å: " + WEBAPP_URL)
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await update.message.reply_text("–û—Ç–∫—Ä–æ–π –∏–≥—Ä—É:", reply_markup=kb_inline)

    kb = ReplyKeyboardMarkup(
        [[KeyboardButton(text="üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True
    )
    await update.message.reply_text("–ò–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é:", reply_markup=kb)

# --- –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp ---
async def any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if msg and getattr(msg, "web_app_data", None) and msg.web_app_data.data:
        raw = msg.web_app_data.data
        try:
            data = json.loads(raw)
        except Exception:
            await msg.reply_text("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
            return

        if isinstance(data, dict) and data.get("type") == "sync":
            state = data.get("state", {})
            saves = load_saves()
            uid = str(msg.from_user.id)
            saves[uid] = {
                "state": state,
                "updated_at": datetime.utcnow().isoformat() + "Z",
                "name": msg.from_user.full_name,
                "username": msg.from_user.username,
            }
            save_saves(saves)
            await msg.reply_text("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚úÖ")
            return

        await msg.reply_text("WebApp: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.")
        return

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tap", tap))
    app.add_handler(MessageHandler(filters.ALL, any_message))

    log.info("Bot is running. /tap to open WebApp.")
    app.run_polling()

if __name__ == "__main__":
    main()
